{"ast":null,"code":"export const codes = [\n// FizzBuzz in all languages\n{\n  id: 1,\n  title: 'FizzBuzz',\n  code: 'for(let i=1; i<=100; i++) { console.log(i % 3 === 0 ? \"Fizz\" : i % 5 === 0 ? \"Buzz\" : i) }',\n  difficulty: 'easy',\n  language: 'JavaScript'\n}, {\n  id: 2,\n  title: 'FizzBuzz',\n  code: 'for i in range(1, 101):\\n    if i % 3 == 0 and i % 5 == 0:\\n        print(\"FizzBuzz\")\\n    elif i % 3 == 0:\\n        print(\"Fizz\")\\n    elif i % 5 == 0:\\n        print(\"Buzz\")\\n    else:\\n        print(i)',\n  difficulty: 'easy',\n  language: 'Python'\n}, {\n  id: 3,\n  title: 'FizzBuzz',\n  code: '#include <iostream>\\nusing namespace std;\\nint main() {\\n    for (int i = 1; i <= 100; i++) {\\n        if (i % 3 == 0 && i % 5 == 0)\\n            cout << \"FizzBuzz\\\\n\";\\n        else if (i % 3 == 0)\\n            cout << \"Fizz\\\\n\";\\n        else if (i % 5 == 0)\\n            cout << \"Buzz\\\\n\";\\n        else\\n            cout << i << \"\\\\n\";\\n    }\\n    return 0;\\n}',\n  difficulty: 'easy',\n  language: 'C++'\n},\n// Two Sum in all languages\n{\n  id: 4,\n  title: 'Two Sum',\n  code: 'function twoSum(nums, target) {\\n    const map = new Map();\\n    for (let i = 0; i < nums.length; i++) {\\n        const complement = target - nums[i];\\n        if (map.has(complement)) {\\n            return [map.get(complement), i];\\n        }\\n        map.set(nums[i], i);\\n    }\\n    return [];\\n}',\n  difficulty: 'medium',\n  language: 'JavaScript'\n}, {\n  id: 5,\n  title: 'Two Sum',\n  code: 'def two_sum(nums, target):\\n    seen = {}\\n    for i, num in enumerate(nums):\\n        complement = target - num\\n        if complement in seen:\\n            return [seen[complement], i]\\n        seen[num] = i\\n    return []',\n  difficulty: 'medium',\n  language: 'Python'\n}, {\n  id: 6,\n  title: 'Two Sum',\n  code: '#include <unordered_map>\\n#include <vector>\\nusing namespace std;\\nvector<int> twoSum(vector<int>& nums, int target) {\\n    unordered_map<int, int> map;\\n    for (int i = 0; i < nums.size(); i++) {\\n        int complement = target - nums[i];\\n        if (map.find(complement) != map.end()) {\\n            return {map[complement], i};\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return {};\\n}',\n  difficulty: 'medium',\n  language: 'C++'\n},\n// Palindrome ---------------\n{\n  id: 7,\n  title: 'Palindrome',\n  code: 'class Solution(object): def isPalindrome(self, x): \\nif x < 0:\\n return False \\noriginal = x\\n   reversed_num = 0  \\nwhile x > 0:\\n last_digit = x % 10 \\nreversed_num = reversed_num * 10 + last_digit \\n x = x // 10 \\n return original == reversed_num',\n  difficulty: 'easy',\n  language: 'Python'\n},\n// Add more problems like Binary Search, Knapsack Problem, etc., for all languages\n{\n  id: 8,\n  title: 'Roman To Integer',\n  code: `class Solution(object): \\n def romanToInt(self, s): \\n roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} \\n total = 0 \\n prev_value = 0 \\n for char in reversed(s): \\n curr_value = roman_dict[char] \\n if curr_value < prev_value: \\n total -= curr_value \\n else: \\n total += curr_value \\n prev_value = curr_value \\n return total`,\n  difficulty: 'easy',\n  language: 'Python'\n}];","map":{"version":3,"names":["codes","id","title","code","difficulty","language"],"sources":["C:/Users/sattu/OneDrive/Desktop/Program/DSA_WWEB/dsa/src/data.js"],"sourcesContent":["export const codes = [\r\n    // FizzBuzz in all languages\r\n    {\r\n      id: 1,\r\n      title: 'FizzBuzz',\r\n      code: 'for(let i=1; i<=100; i++) { console.log(i % 3 === 0 ? \"Fizz\" : i % 5 === 0 ? \"Buzz\" : i) }',\r\n      difficulty: 'easy',\r\n      language: 'JavaScript',\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'FizzBuzz',\r\n      code: 'for i in range(1, 101):\\n    if i % 3 == 0 and i % 5 == 0:\\n        print(\"FizzBuzz\")\\n    elif i % 3 == 0:\\n        print(\"Fizz\")\\n    elif i % 5 == 0:\\n        print(\"Buzz\")\\n    else:\\n        print(i)',\r\n      difficulty: 'easy',\r\n      language: 'Python',\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'FizzBuzz',\r\n      code: '#include <iostream>\\nusing namespace std;\\nint main() {\\n    for (int i = 1; i <= 100; i++) {\\n        if (i % 3 == 0 && i % 5 == 0)\\n            cout << \"FizzBuzz\\\\n\";\\n        else if (i % 3 == 0)\\n            cout << \"Fizz\\\\n\";\\n        else if (i % 5 == 0)\\n            cout << \"Buzz\\\\n\";\\n        else\\n            cout << i << \"\\\\n\";\\n    }\\n    return 0;\\n}',\r\n      difficulty: 'easy',\r\n      language: 'C++',\r\n    },\r\n  \r\n    // Two Sum in all languages\r\n    {\r\n      id: 4,\r\n      title: 'Two Sum',\r\n      code: 'function twoSum(nums, target) {\\n    const map = new Map();\\n    for (let i = 0; i < nums.length; i++) {\\n        const complement = target - nums[i];\\n        if (map.has(complement)) {\\n            return [map.get(complement), i];\\n        }\\n        map.set(nums[i], i);\\n    }\\n    return [];\\n}',\r\n      difficulty: 'medium',\r\n      language: 'JavaScript',\r\n    },\r\n    {\r\n      id: 5,\r\n      title: 'Two Sum',\r\n      code: 'def two_sum(nums, target):\\n    seen = {}\\n    for i, num in enumerate(nums):\\n        complement = target - num\\n        if complement in seen:\\n            return [seen[complement], i]\\n        seen[num] = i\\n    return []',\r\n      difficulty: 'medium',\r\n      language: 'Python',\r\n    },\r\n    {\r\n      id: 6,\r\n      title: 'Two Sum',\r\n      code: '#include <unordered_map>\\n#include <vector>\\nusing namespace std;\\nvector<int> twoSum(vector<int>& nums, int target) {\\n    unordered_map<int, int> map;\\n    for (int i = 0; i < nums.size(); i++) {\\n        int complement = target - nums[i];\\n        if (map.find(complement) != map.end()) {\\n            return {map[complement], i};\\n        }\\n        map[nums[i]] = i;\\n    }\\n    return {};\\n}',\r\n      difficulty: 'medium',\r\n      language: 'C++',\r\n    },\r\n\r\n    // Palindrome ---------------\r\n    {\r\n        id: 7,\r\n        title: 'Palindrome',\r\n        code: 'class Solution(object): def isPalindrome(self, x): \\nif x < 0:\\n return False \\noriginal = x\\n   reversed_num = 0  \\nwhile x > 0:\\n last_digit = x % 10 \\nreversed_num = reversed_num * 10 + last_digit \\n x = x // 10 \\n return original == reversed_num',\r\n        difficulty: 'easy',\r\n        language: 'Python',\r\n    },\r\n  \r\n    // Add more problems like Binary Search, Knapsack Problem, etc., for all languages\r\n    {\r\n      id: 8,\r\n      title: 'Roman To Integer',\r\n      code: `class Solution(object): \\n def romanToInt(self, s): \\n roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} \\n total = 0 \\n prev_value = 0 \\n for char in reversed(s): \\n curr_value = roman_dict[char] \\n if curr_value < prev_value: \\n total -= curr_value \\n else: \\n total += curr_value \\n prev_value = curr_value \\n return total`,\r\n      difficulty: 'easy',\r\n      language: 'Python',\r\n  },\r\n  ];\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  "],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAG;AACjB;AACA;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,UAAU;EACjBC,IAAI,EAAE,4FAA4F;EAClGC,UAAU,EAAE,MAAM;EAClBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,UAAU;EACjBC,IAAI,EAAE,8MAA8M;EACpNC,UAAU,EAAE,MAAM;EAClBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,UAAU;EACjBC,IAAI,EAAE,8WAA8W;EACpXC,UAAU,EAAE,MAAM;EAClBC,QAAQ,EAAE;AACZ,CAAC;AAED;AACA;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,SAAS;EAChBC,IAAI,EAAE,6SAA6S;EACnTC,UAAU,EAAE,QAAQ;EACpBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,SAAS;EAChBC,IAAI,EAAE,kOAAkO;EACxOC,UAAU,EAAE,QAAQ;EACpBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,SAAS;EAChBC,IAAI,EAAE,+YAA+Y;EACrZC,UAAU,EAAE,QAAQ;EACpBC,QAAQ,EAAE;AACZ,CAAC;AAED;AACA;EACIJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,YAAY;EACnBC,IAAI,EAAE,2PAA2P;EACjQC,UAAU,EAAE,MAAM;EAClBC,QAAQ,EAAE;AACd,CAAC;AAED;AACA;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,kBAAkB;EACzBC,IAAI,EAAE,oWAAoW;EAC1WC,UAAU,EAAE,MAAM;EAClBC,QAAQ,EAAE;AACd,CAAC,CACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}